{"version":3,"file":"index.esm.js","sources":["../src/utils/port.ts","../src/stats.ts","../src/router.ts","../src/plugin.ts","../src/index.ts"],"sourcesContent":["import net from 'net'\n\nexport interface Options {\n  /**\n   * A preferred port or an array of preferred ports to use.\n   */\n  port?: number | ReadonlyArray<number>\n\n  /**\n   * The host on which port resolution should be performed. Can be either an IPv4 or IPv6 address.\n   */\n  host?: string\n}\n\nconst isAvailable = (options: Options): Promise<number> =>\n  new Promise((resolve, reject) => {\n    const server = net.createServer()\n    server.unref()\n    server.on('error', reject)\n    server.listen(options, () => {\n      const { port } = server.address() as any\n      server.close(() => {\n        resolve(port as number)\n      })\n    })\n  })\n\nconst getPort = (options: Options) => {\n  options = Object.assign({}, options)\n\n  if (typeof options.port === 'number') {\n    options.port = [options.port]\n  }\n\n  return (options.port || []).reduce(\n    (seq, port) =>\n      seq.catch(() => isAvailable(Object.assign({}, options, { port }))),\n    Promise.reject()\n  )\n}\n\nexport default (options?: Options) =>\n  options\n    ? getPort(options).catch(() => getPort(Object.assign(options, { port: 0 })))\n    : getPort({ port: 0 })\n","import type { Server as ProxyServer } from 'proxy-chain'\n\nexport interface ConnectionLogEntry {\n  /** Connection Id */\n  id: number\n  /** Proxy name */\n  proxy: string\n  /** Host */\n  host: string\n}\n\nexport interface ConnectionStats {\n  srcTxBytes: number\n  srcRxBytes: number\n  trgTxBytes: number\n  trgRxBytes: number\n}\n\nexport class ProxyRouterStats {\n  /** Log of all connections (id, proxyName, host) */\n  public connectionLog: ConnectionLogEntry[] = []\n  protected connectionStats: Map<number, ConnectionStats> = new Map()\n\n  constructor(private proxyServer: ProxyServer) {}\n\n  /** @internal */\n  public addConnection(id: number, proxy: string, host: string) {\n    this.connectionLog.push({ id, proxy, host })\n  }\n  /** @internal */\n  public addStats(connectionId: number, stats: ConnectionStats) {\n    this.connectionStats.set(connectionId as number, stats)\n  }\n\n  /** Get bytes transferred by proxy */\n  public get byProxy() {\n    this.getStatsFromActiveConnections()\n    // Get unique proxy names from our actual connection logs\n    const proxyNames = Array.from(\n      new Set(this.connectionLog.map(({ proxy }) => proxy))\n    )\n    const getConnectionIdsForProxy = (proxyName: string) =>\n      this.connectionLog\n        .filter(({ proxy }) => proxy === proxyName)\n        .map(({ id }) => id)\n    const trafficByProxy = Object.fromEntries(\n      proxyNames\n        .map((proxyName) => {\n          const ids = getConnectionIdsForProxy(proxyName)\n          const stats = ids.map((id) => this.connectionStats.get(id))\n          const totalBytes = stats\n            .map((stat) => this.calculateProxyBytes(stat))\n            .reduce((a, b) => a + b)\n          return [proxyName, totalBytes]\n        })\n        // Sort by most bytes on top\n        .sort((a, b) => (b[1] as number) - (a[1] as number))\n    )\n    return trafficByProxy\n  }\n\n  /** Get bytes transferred by host */\n  public get byHost() {\n    this.getStatsFromActiveConnections()\n    // Get unique proxy names from our actual connection logs\n    const hostNames = Array.from(\n      new Set(this.connectionLog.map(({ host }) => host))\n    )\n    const getConnectionIdsForHost = (hostName: string) =>\n      this.connectionLog\n        .filter(({ host }) => host === hostName)\n        .map(({ id }) => id)\n    const trafficByHost = Object.fromEntries(\n      hostNames\n        .map((hostName) => {\n          const ids = getConnectionIdsForHost(hostName)\n          const stats = ids.map((id) => this.connectionStats.get(id))\n          const totalBytes = stats\n            .map((stat) => this.calculateProxyBytes(stat))\n            .reduce((a, b) => a + b)\n          return [hostName, totalBytes]\n        })\n        // Sort by most bytes on top\n        .sort((a, b) => (b[1] as number) - (a[1] as number))\n    )\n    return trafficByHost\n  }\n\n  protected getStatsFromActiveConnections() {\n    // collect stats for active connections\n    this.proxyServer.getConnectionIds().forEach((connectionId) => {\n      const stats = this.proxyServer.getConnectionStats(connectionId)\n      if (stats) {\n        this.connectionStats.set(connectionId as number, stats)\n      }\n    })\n  }\n\n  protected calculateProxyBytes(stats?: Partial<ConnectionStats>) {\n    if (!stats) {\n      return 0\n    }\n    return (stats.trgRxBytes || 0) + (stats.trgTxBytes || 0)\n  }\n}\n","import { Server as ProxyServer, RequestError, redactUrl } from 'proxy-chain'\nimport type * as ProxyChain from 'proxy-chain'\n\nimport getPort from './utils/port'\n\nimport { ProxyRouterStats } from './stats'\n\nimport Debug from 'debug'\n\nconst debug = Debug('puppeteer-extra:proxy-router')\nconst debugVerbose = debug.extend('verbose')\nconst warn = console.warn.bind(console, `\\n[proxy-router] %s`) // Preserves line numbers\n\ntype ProxyServerOpts = ConstructorParameters<typeof ProxyServer>[0]\n\nexport interface Proxies {\n  /** The default proxy for the browser (format: `http://user:pass@proxyhost:port`), if omitted or `null` no proxy will be used by default */\n  DEFAULT?: string | null\n  /** Any other custom proxy names which can be used for routing later (e.g. `'DATACENTER_US': 'http://user:pass@proxyhost:port'`) */\n  [key: string]: string | null\n}\n\nexport type ProxyName = 'DIRECT' | 'DEFAULT' | 'ABORT' | string\n\n/** Data available to the `routeByHost` function */\nexport interface RouteByHostArgs {\n  /** Request URL host */\n  host: string\n  /** Whether the request is http or not */\n  isHttp: boolean\n  /** Request port (typically 443 or 80) */\n  port: number\n}\nexport type RouteByHostResponse = ProxyName | void\nexport type RouteByHostFn = (\n  args: RouteByHostArgs\n) => Promise<RouteByHostResponse>\n\nexport interface ProxyRouterOpts {\n  /**\n   * A dictionary of proxies to be made available to the browser and router.\n   *\n   * An optional entry named `DEFAULT` will be used for all requests, unless overriden by `routeByHost`.\n   * If the `DEFAULT` entry is omitted no proxy will be used by default.\n   *\n   * The value of an entry can be a string (format: `http://user:pass@proxyhost:port`) or `null` (direct connection).\n   * Proxy authentication is handled automatically by the router.\n   *\n   * @example\n   * proxies: {\n   *   DEFAULT: \"http://user:pass@proxyhost:port\", // use this proxy by default\n   *   RESIDENTIAL_US: \"http://user:pass@proxyhost2:port\" // use this for specific hosts with `routeByHost`\n   * }\n   */\n  proxies?: Proxies\n\n  /**\n   * An optional function to allow proxy routing based on the target host of the request.\n   *\n   * A return value of nothing, `null` or `DEFAULT` will result in the DEFAULT proxy being used as configured.\n   * A return value of `DIRECT` will result in no proxy being used.\n   * A return value of `ABORT` will cancel/block this request.\n   *\n   * Any other string as return value is assumed to be a reference to the configured `proxies` dict.\n   *\n   * @note The browser will most often establish only a single proxy connection per host.\n   *\n   * @example\n   * routeByHost: async ({ host }) => {\n   *   if (host.includes('google')) { return \"DIRECT\" }\n   *   return 'RESIDENTIAL_US'\n   * }\n   *\n   */\n  routeByHost?: RouteByHostFn\n  /** Collect traffic and connection stats, default: true */\n  collectStats?: boolean\n  /** Don't print any proxy connection errors to stderr, default: false */\n  muteProxyErrors?: boolean\n  /** Suppress proxy errors for specific hosts */\n  muteProxyErrorsForHost?: string[]\n  /** Options for the local proxy-chain server  */\n  proxyServerOpts?: ProxyServerOpts\n}\n\nexport class ProxyRouter {\n  /** The underlying local proxy server used for routing to upstream proxies */\n  public proxyServer: ProxyChain.Server\n  /** An optional function to route hosts  */\n  public routeByHost: RouteByHostFn | null\n  /**\n   * The dictionary of proxies made available (format: `FOOBAR: 'http://user:pass@proxyhost:port'`).\n   * Can be modified at runtime.\n   */\n  public proxies: Proxies\n  /** Traffic stats collector */\n  public readonly stats: ProxyRouterStats\n\n  public isListening: boolean = false\n  protected serverStartPromise: Promise<number> | null\n  protected collectStats: boolean\n  protected muteProxyErrors: boolean\n  protected muteProxyErrorsForHost: string[]\n  /** Internal list of failed connections to only print the same connection issue once */\n  protected failedConnections: { host: string; proxy: string }[] = []\n\n  constructor(opts: ProxyRouterOpts = {}) {\n    const proxyServerOpts: ProxyServerOpts = {\n      ...opts.proxyServerOpts,\n      prepareRequestFunction: this.handleProxyServerRequest.bind(this),\n    }\n    proxyServerOpts.port = proxyServerOpts.port || 2800\n\n    this.proxies = opts.proxies || {}\n\n    this.routeByHost = opts.routeByHost || null\n    this.proxyServer = new ProxyServer(proxyServerOpts)\n    this.collectStats = opts.collectStats ?? true\n    this.stats = new ProxyRouterStats(this.proxyServer)\n\n    this.muteProxyErrors = opts.muteProxyErrors ?? false\n    this.muteProxyErrorsForHost = opts.muteProxyErrorsForHost || []\n\n    debug('initialized', opts)\n\n    // Emitted when HTTP connection is closed\n    this.proxyServer.on('connectionClosed', ({ connectionId, stats }) => {\n      if (stats && this.collectStats) {\n        this.stats.addStats(connectionId as number, stats)\n      }\n      debugVerbose(`Connection ${connectionId} closed`)\n    })\n\n    // Emitted when a HTTP request fails\n    this.proxyServer.on('requestFailed', ({ request, error }) => {\n      if (!this.muteProxyErrors) {\n        warn('Request failed:', request.url, error)\n      }\n    })\n\n    // Emitted in case of a upstream proxy error (which can mean various things)\n    this.proxyServer.on(\n      'proxyAuthenticationFailed',\n      ({\n        connectionId,\n        str: errorStr,\n      }: {\n        connectionId: unknown\n        str: string\n      }) => {\n        // resolve the affected host and proxy\n        const { host, proxy } =\n          this.stats.connectionLog.find(({ id }) => id === connectionId) || {}\n        const proxyUrl = !!proxy ? this.getProxyForName(proxy) : null\n\n        const info: string[] = [errorStr]\n        info.push(\n          \"This error can be thrown if a resource on a site simply can't be accessed (often temporarily), in this case this can be ignored.\",\n          ` - To not have errors like this printed to the console you can set 'muteProxyErrors: true' ${\n            !!host ? `or 'muteProxyErrorsForHost: [\"${host}\"]'` : ''\n          }`,\n          'It can also indicate incorrect proxy credentials or that the target host is blocked by the proxy.',\n          ' - Make sure the provided proxy string and credentials are correct and the site is not blocked by the proxy (or vice versa).',\n          \" - In case the site is blocked by the proxy: Use 'routeByHost' to route the host through a different proxy or as 'DIRECT' or 'ABORT'.\"\n        )\n        if (host && proxy) {\n          info.push(\n            '',\n            `Affected target host: \"${host}\"`,\n            `Affected proxy name: \"${proxy}\"`\n          )\n        }\n        if (proxyUrl) {\n          info.push(`Affected proxy URL: \"${proxyUrl}\"`)\n          info.push(\n            '',\n            `To test the proxy with curl: curl -v --proxy '${proxyUrl}' 'https://${host}'`,\n            ''\n          )\n          if (!`${proxyUrl}`.includes('http://')) {\n            info.push('PS: Did you forget to prefix the proxy with \"http://\"?')\n          }\n        }\n        const probablyNoise =\n          errorStr.includes('authenticate') && errorStr.includes('522')\n        const isMuted =\n          this.muteProxyErrors || this.muteProxyErrorsForHost.includes(host)\n        const alreadySeen = !!this.failedConnections.find(\n          (entry) => entry.host === host && entry.proxy === proxy\n        )\n        const logger = probablyNoise || isMuted || alreadySeen ? debug : warn\n        logger(info.join('\\n'))\n        if (host && proxy) {\n          this.failedConnections.push({ host, proxy })\n        }\n      }\n    )\n\n    // Resurface some errors that proxy-chain seems to swallow\n    this.proxyServer.log = (function (originalMethod, context) {\n      return function (connectionId: unknown, str: string) {\n        if (`${str}`.includes('Failed to authenticate upstream proxy')) {\n          context.emit('proxyAuthenticationFailed', {\n            connectionId,\n            str,\n          })\n        }\n        if (`${str}`.includes('Error: Invalid \"upstreamProxyUrl\" provided')) {\n          context.emit('proxyAuthenticationFailed', {\n            connectionId,\n            str,\n          })\n        }\n        if (`${str}`.includes('Failed to connect to upstream proxy')) {\n          context.emit('proxyAuthenticationFailed', {\n            connectionId,\n            str,\n          })\n        }\n        originalMethod.apply(context, [connectionId, str])\n      }\n    })(this.proxyServer.log, this.proxyServer)\n  }\n\n  /** Proxy server URL of the local proxy server used for routing */\n  public get proxyServerUrl() {\n    const port = this.proxyServer?.port\n    if (!port || !this.isListening) {\n      return\n    }\n    return `http://localhost:${port}`\n  }\n\n  public get effectiveProxies() {\n    return {\n      DIRECT: null,\n      ...(this.proxies || {}),\n    }\n  }\n\n  /** Start the local proxy server and accept connections */\n  public async listen(): Promise<number> {\n    debug('starting server..')\n    if (this.serverStartPromise) {\n      debug('server start promise exists already')\n      return this.serverStartPromise\n    }\n    this.serverStartPromise = new Promise(async (resolve) => {\n      if (this.isListening) {\n        debug('server listening already')\n        return resolve(this.proxyServer.port)\n      }\n      const desiredPort = this.proxyServer.port\n      debug('finding available port', { desiredPort })\n      const availablePort = await getPort({ port: desiredPort })\n      debug('availablePort:', availablePort)\n      this.proxyServer.port = availablePort\n      this.proxyServer.listen((err) => {\n        if (err === null) {\n          debug(`server listening on port ${this.proxyServer.port}`)\n          this.isListening = true\n          return resolve(this.proxyServer.port)\n        }\n        warn('Unable to start local server:', err)\n      })\n    })\n    return this.serverStartPromise\n  }\n\n  /** Stop the local proxy server */\n  public async close(): Promise<NodeJS.ErrnoException | null> {\n    debug('closing..')\n    return new Promise((resolve) => {\n      this.proxyServer.close(true, (err) => {\n        if (err === null) {\n          debug('closed without error')\n          return resolve(null)\n        }\n        debug('closed with error', err)\n        return resolve(err)\n      })\n    })\n  }\n\n  public getProxyForName(name: ProxyName): string | null {\n    return this.effectiveProxies[name]\n  }\n\n  /** Handle requests to the proxy server */\n  protected async handleProxyServerRequest({\n    request,\n    hostname: host,\n    port,\n    connectionId,\n    isHttp,\n  }: ProxyChain.PrepareRequestFunctionOpts): Promise<void | ProxyChain.PrepareRequestFunctionResult> {\n    let proxyName = 'DEFAULT'\n    if (!!this.routeByHost) {\n      const fnResult = await this.routeByHost({ host, isHttp, port })\n      if (typeof fnResult === 'string' && !!fnResult) {\n        proxyName = fnResult\n      }\n    }\n    if (this.collectStats) {\n      this.stats.addConnection(connectionId, proxyName, host)\n    }\n    let proxyUrl = this.getProxyForName(proxyName)\n    debugVerbose(\n      'handleProxyServerRequest',\n      host,\n      proxyName,\n      redactProxyUrl(proxyUrl)\n    )\n    if (proxyName === 'ABORT') {\n      throw new RequestError('Request aborted', 400)\n    }\n    if (!proxyUrl && proxyUrl !== null) {\n      warn(\n        `No proxy configured for proxy name \"${proxyName}\" - configuration error?`\n      )\n      proxyUrl = null\n    }\n    return {\n      upstreamProxyUrl: proxyUrl,\n    }\n  }\n}\n\nfunction redactProxyUrl(input: unknown) {\n  if (!input || typeof input !== 'string') {\n    return `${input}`\n  }\n  try {\n    return redactUrl(input)\n  } catch (err) {\n    return `${input}`\n  }\n}\n\n/** Standalone proxy router not requiring plugin events */\nexport const ProxyRouterStandalone = ProxyRouter\n","import { PuppeteerExtraPlugin } from 'puppeteer-extra-plugin'\nimport { ProxyRouter, ProxyRouterOpts } from './router'\n\nexport type ExtraPluginProxyRouterOptions = ProxyRouterOpts & {\n  /**\n   * Optionally exempt hosts from going through a proxy, even our internal routing proxy.\n   *\n   * Examples:\n   * `.com` or `chromium.org` or `.domain.com`\n   *\n   * @see\n   * https://chromium.googlesource.com/chromium/src/+/HEAD/net/docs/proxy.md#proxy-bypass-rules\n   * https://www-archive.mozilla.org/quality/networking/docs/aboutno_proxy_for.html\n   */\n  proxyBypassList?: string[]\n}\n\nexport class ExtraPluginProxyRouter extends PuppeteerExtraPlugin {\n  /** The underlying proxy router instance */\n  public router: ProxyRouter\n  /** The name of the automation framework used */\n  public framework: 'playwright' | 'puppeteer' | null = null\n  // Disable the puppeteer compat shim when used with playwright-extra\n  public noPuppeteerShim = true\n\n  constructor(opts: Partial<ExtraPluginProxyRouterOptions>) {\n    super(opts)\n    this.debug('Initialized', this.opts)\n    this.router = new ProxyRouter(this.opts)\n  }\n\n  get name() {\n    return 'proxy-router'\n  }\n\n  get defaults(): ExtraPluginProxyRouterOptions {\n    return {\n      collectStats: true,\n      proxyServerOpts: {\n        port: 2800,\n      },\n    }\n  }\n\n  // Make accessing router methods shorter\n  /** Get or set proxies at runtime */\n  public get proxies() {\n    return this.router.proxies\n  }\n  public set proxies(proxies) {\n    this.router.proxies = proxies\n  }\n\n  /** Retrieve traffic statistics */\n  public get stats() {\n    return this.router.stats\n  }\n\n  /** Get or set the `routeByHost` function at runtime */\n  public get routeByHost() {\n    return this.router.routeByHost\n  }\n  public set routeByHost(fn) {\n    this.router.routeByHost = fn\n  }\n\n  private get proxyBypassListString() {\n    return (this.opts.proxyBypassList || []).join(',') || undefined\n  }\n\n  async onPluginRegistered(args?: { framework: 'playwright' }): Promise<void> {\n    this.framework =\n      args?.framework === 'playwright' ? 'playwright' : 'puppeteer'\n    this.debug('plugin registered', this.framework)\n  }\n\n  async beforeLaunch(options: unknown = {}): Promise<void> {\n    this.debug('beforeLaunch - before', options)\n    await this.router.listen()\n\n    const proxyUrl = this.router.proxyServerUrl\n    if (!proxyUrl) {\n      throw new Error('No local proxy server available')\n    }\n\n    if (this.framework === 'playwright') {\n      const pwOptions = options as PlaywrightLaunchOptions\n      pwOptions.proxy = {\n        server: proxyUrl,\n        bypass: this.proxyBypassListString,\n      }\n    } else if (this.framework === 'puppeteer') {\n      const pptrOptions = options as PuppeteerLaunchOptions\n      pptrOptions.args = pptrOptions.args || []\n      pptrOptions.args.push(`--proxy-server=${proxyUrl}`)\n      if (this.proxyBypassListString) {\n        pptrOptions.args.push(\n          `--proxy-bypass-list=${this.proxyBypassListString}`\n        )\n      }\n    } else {\n      this.debug('Unsupported framework, not setting proxy')\n    }\n    this.debug('beforeLaunch - after', options)\n  }\n\n  async onDisconnected(): Promise<void> {\n    await this.router.close().catch(this.debug)\n  }\n}\n\ninterface PuppeteerLaunchOptions {\n  args?: string[]\n}\n\ninterface PlaywrightLaunchOptions {\n  proxy?: {\n    /**\n     * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or\n     * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.\n     */\n    server: string\n\n    /**\n     * Optional comma-separated domains to bypass proxy, for example `\".com, chromium.org, .domain.com\"`.\n     */\n    bypass?: string\n  }\n}\n","import { ExtraPluginProxyRouter, ExtraPluginProxyRouterOptions } from './plugin'\n\nexport * from './plugin'\nexport * from './router'\nexport * from './stats'\n\n/** Default export, ExtraPluginProxyRouter  */\nconst defaultExport = (options?: Partial<ExtraPluginProxyRouterOptions>) => {\n  return new ExtraPluginProxyRouter(options || {})\n}\n\nexport default defaultExport\n"],"names":["ProxyServer","getPort"],"mappings":"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"}